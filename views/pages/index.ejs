<!DOCTYPE html>
<html>

<head>
    <% include ../partials/header.ejs %>
        <title>PeerJSIPX</title>
        <link rel="stylesheet" href="../style.css">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>
        <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.14/peer.js"></script> -->

        <!-- Compiled and minified CSS -->
        <link rel="stylesheet" href="../materialize.min.css">

        <!-- Compiled and minified JavaScript -->
        <script src="../materialize.min.js"></script>
        <script src="../peer.min.js"></script>
        <script src="https://chancejs.com/chance.js"></script>

        <script>
            var data = "";
            var id = "";
            var peerID = "";
            var idIndex = "";
            var list = [];

            function randomAction(id) {

                function randomizer() {
                    peer.listAllPeers(function cb(list) {
                        console.log(list);
                        idIndex = list.indexOf(id);

                        if (list.length <= 1 || idIndex === -1) {
                            console.log('Failed to connect [', id, '] : not enough peers');
                            window.existingCall.close();
                            step2();
                            alert("Not enough peers")
                            return -1;
                        } else {
                            var otherPeerIdIndex;
                            do {
                                otherPeerIdIndex = Math.floor(Math.random() * list.length);
                            } while (otherPeerIdIndex === idIndex);

                            var otherPeerId = list[otherPeerIdIndex];
                            console.log(otherPeerId);
                            var call = peer.call((otherPeerId), window.localStream);

                            step3(call);
                            return otherPeerId;

                        }
                    });
                }
                return randomizer;
            }

            // Compatibility shim
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

            // PeerJS object
            var stunURL = 'stun:stun.l.google.com:19302';
            var userID = chance.zip();
            console.log("Our id " + userID);
            //userID, 
            var peer = new Peer(userID, {
                host: 'peerjsipx.herokuapp.com',
                port: 443,
                secure: true,
                debug: 3,
                config: {
                    'iceServers': [{
                        urls: 'turn:numb.viagenie.ca',
                        credential: 'turn',
                        username: 'shobured@gmail.com'
                    }]
                }
            });

            peer.on('open', function() {
                $('#my-id').text(peer.id);
            });

            // Receiving a call
            peer.on('call', function(call) {
                // Answer the call automatically (instead of prompting user) for demo purposes
                call.answer(window.localStream);
                step3(call);
            });
            peer.on('error', function(err) {
                console.log(err.message);
                // Return to step 2 if error occurs
                step2();
            });

            // Click handlers setup
            $(function() {
                $('#make-call').click(function() {
                    // Initiate a call!
                    var call = peer.call($('#callto-id').val(), window.localStream);

                    step3(call);
                });

                // Randomizer
                $('#random-call').click(function() {
                    // Initiate a call!
                    var call = peer.call($('#callto-id').val(), window.localStream);
                    //var call = peer.call((randomAction(peer.id)), window.localStream);

                    step3(call);
                    step3(call);
                });

                $('#end-call').click(function() {
                    window.existingCall.close();
                    step2();
                });

                // Retry if getUserMedia fails
                $('#step1-retry').click(function() {
                    $('#step1-error').hide();
                    step1();
                });

                // Get things started
                step1();
            });

            function step1() {
                // Get audio/video stream
                navigator.getUserMedia({
                    audio: true,
                    video: true
                }, function(stream) {
                    // Set your video displays
                    $('#my-video').prop('srcObject', stream);

                    window.localStream = stream;
                    step2();
                }, function() {
                    $('#step1-error').show();
                });
            }

            function step2() {
                $('#step1, #step3').hide();
                $('#step2').show();
            }

            function step3(call) {
                // Hang up on an existing call if present
                if (window.existingCall) {
                    window.existingCall.close();
                }

                // Wait for stream on the call, then set peer video display
                call.on('stream', function(stream) {
                    $('#their-video').prop('srcObject', stream);
                });

                // UI stuff
                window.existingCall = call;
                $('#their-id').text(call.peer);
                call.on('close', step2);
                $('#step1, #step2').hide();
                $('#step3').show();
            }
        </script>


</head>

<body>
    <nav class="nav-extended">
        <div class="nav-wrapper purple darken-4">
            <a href="#!" class="brand-logo center"><i class="material-icons">tv</i>BetterNot</a>
            <br>
        </div>
        <div class="nav-content purple darken-4">
            <ul class="tabs tabs-transparent">
                <li><a class="waves-effect  green accent-3 btn">Connect</a></li>
                <li>
                    <div class="input-field"><input id="text1" type="text" class="white black-text">
                        <label for="text1" class="grey-text">Text Box 1</label></div>
                </li>
                <li>&nbsp;
                </li>
                <li>
                    <div class="input-field"><input id="text2" type="text" class="white black-text">
                        <label for="text1" class="grey-text">Text Box 2</label></div>
                </li>
            </ul>
        </div>


    </nav>
    <div class="pure-g">

        <!-- Video area -->
        <div class="pure-u-2-3" id="video-container">
            <div class="card large">
                <video id="their-video" autoPlay="true"></video>
                <div class="card-content">
                    <span class="card-title activator grey-text text-darken-4">Random Player</span>

                </div>
            </div>

        </div>

        <!-- Steps -->
        <div class="pure-u-1-3" id="video-container">
            <div class="card small">
                <video id="my-video" muted="true" autoPlay="true"></video>
                <div class="card-content">
                    <div class="flow-text">
                        <p>Your id: <span id="my-id">...</span></p>
                    </div>
                </div>
            </div>
            <!-- Get local audio/video stream -->
            <div id="step1">
                <p>Please click `allow` on the top of the screen so we can access your webcam and microphone for calls.</p>
                <div id="step1-error">
                    <p>Failed to access the webcam and microphone. Make sure to run this demo on an http server and click allow when asked for permission by the browser.</p>
                    <a href="#" class="pure-button pure-button-error" id="step1-retry">Try again</a>
                </div>
            </div>

            <!-- Make calls to others -->
            <div class="flow-text" id="step2">
                <div class="pure-form"></div>
                <p>Time: <span id="time">0:00</span></p>
                <input type="text" placeholder="Call user id..." id="callto-id">
                <a href="#" class="waves-effect green accent-3 btn" id="random-call">Call Peer</a>
            </div>
            <div class="flow-text" id="step3">
                <p>Currently in call with <span id="their-id">...</span></p>
                <p><a href="#" class="waves-effect red btn" id="end-call">End call</a></p>
            </div>
        </div>

        <!-- Call in progress -->

    </div>
    </div>



</body>

</html>